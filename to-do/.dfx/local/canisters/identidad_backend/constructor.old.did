type TaskStatus = 
 variant {
   completed;
   pending;
 };
type TaskId = nat32;
type Task = 
 record {
   description: text;
   id: TaskId;
   owner: principal;
   status: TaskStatus;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec Profile;
 };
type Result = 
 variant {
   err: text;
   ok: vec Task;
 };
type Profile = 
 record {
   email: text;
   owner: principal;
   username: text;
 };
type GetProfileResultOk = 
 record {
   email: text;
   owner: principal;
   username: text;
 };
type GetProfileResultErr = 
 variant {
   userDoesNotExist;
   userNotAuthenticated;
 };
type GetProfileResult = 
 variant {
   err: GetProfileResultErr;
   ok: GetProfileResultOk;
 };
service : {
  addProfile: (Profile) -> (Result_2);
  addTaskToProfile: (text, text) -> (Result_2);
  delProfile: (text) -> (GetProfileResult);
  getProfile: (text) -> (GetProfileResult) query;
  getProfiles: () -> (Result_1) query;
  listTasksForUser: (text) -> (Result);
  whoami: () -> (principal) query;
}
